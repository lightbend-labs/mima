groupId = org.scala-lang
artifactId = scala-reflect
v1 = 2.12.1
v2 = 2.12.11-bin-5e1c72f

filter.problems=[
  { problemName=Problem, matchName="scala.reflect.internal.*" }

  # 2.12.1
  # JavaMirrors is private[scala]
  # JavaUniverse is private[scala]
  # SymbolLoaders is private[reflect]
  { matchName="scala.reflect.runtime.JavaMirrors*"   , problemName=Problem }
  { matchName="scala.reflect.runtime.JavaUniverse*"  , problemName=Problem }
  { matchName="scala.reflect.runtime.SymbolLoaders*" , problemName=Problem }

  # 2.12.2
  # SynchronizedOps is private[reflect]
  { matchName="scala.reflect.runtime.SynchronizedOps*" , problemName=Problem }

  # 2.12.4
  # IOStats is private[io]
  { matchName="scala.reflect.io.IOStats*" , problemName=Problem }
  # SynchronizedSymbols is private[reflect]
  { matchName="scala.reflect.runtime.SynchronizedSymbols*" , problemName=Problem }

  # 2.12.2-4 -> 2.12.5
  # FileZipArchive#LeakyEntry is private[this]
  { matchName="scala.reflect.io.FileZipArchive#LeakyEntry*" , problemName=Problem }

  # 2.12.7
  # Related to bridge method static forwarder overloads, see below.
  { matchName="scala.reflect.io.NoAbstractFile.seq"  , problemName=IncompatibleSignatureProblem }
  { matchName="scala.reflect.io.NoAbstractFile.view" , problemName=IncompatibleSignatureProblem }

  # 2.12.8
  # Loss of the bridge method static forwarder overloads
  { matchName="scala.reflect.io.NoAbstractFile.seq"  , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.io.NoAbstractFile.view" , problemName=DirectMissingMethodProblem }

  # 2.12.7 -> 2.12.8-9(+?)
  # Loss of the bridge method static forwarder overloads
  { matchName="scala.reflect.io.FileOperationException.apply"             , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.io.NoAbstractFile.groupBy"                   , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.io.NoAbstractFile.toIterable"                , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.io.NoAbstractFile.toMap"                     , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.io.NoAbstractFile.toSeq"                     , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.io.NoAbstractFile.toSet"                     , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.io.NoAbstractFile.toTraversable"             , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.macros.ParseException.apply"                 , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.macros.ReificationException.apply"           , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.macros.TypecheckException.apply"             , problemName=DirectMissingMethodProblem }
  { matchName="scala.reflect.macros.UnexpectedReificationException.apply" , problemName=DirectMissingMethodProblem }

  # 2.12.9
  # ZipArchive is "considered experimental"
  { matchName="scala.reflect.io.ZipArchive.close" , problemName=ReversedMissingMethodProblem }

  # 2.12.10
  # ZipArchive is "considered experimental"
  # switches from scala.collection.mutable.Map/scala.collection.mutable.HashMap to java.util.Map
  { matchName="scala.reflect.io.FileZipArchive.allDirs" , problemName=IncompatibleResultTypeProblem }
  { matchName="scala.reflect.io.ZipArchive.getDir" , problemName=IncompatibleMethTypeProblem }
]
